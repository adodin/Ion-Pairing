# =============================================================================
# Add Bias Potentials
# =============================================================================

# Create Group of All Biased Atoms to Exclude from COM Biasing
group biased union anions cations

# z Biases
# -----------------------------------------------------------------------------

# Check if no zBias specified
if "${zBias} == False" then &
    "jump SELF zBreak"

variable zBiasCounter string 0

# If zBias specified loop through biases
label zLoop

variable zBiasCounter string $(v_zBiasCounter+1)

variable negative string 1

# Check if ion type is specified & assign ID
if "${zBias} == id" then &
    "next zBias" &
    "variable zBiasID string ${zBias}" &
    "variable label string ${label}.z.id${zBias}" &
elif "${zBias} == c" &
    "next zBias" &
    "variable zBiasID string $(count(waters)+v_zBias)" &
    "variable label string ${label}.z.c${zBias}" &
elif "${zBias} == a" &
    "next zBias" &
    "variable zBiasID string $(count(waters)+count(cations)+v_zBias)" &
    "variable label string ${label}.z.a${zBias}" &
elif "${zBias} == idm" &
    "next zBias" &
    "variable zBiasID string ${zBias}" &
    "variable negative string -1" &
    "variable label string ${label}.z.id${zBias}" &
elif "${zBias} == cm" &
    "next zBias" &
    "variable zBiasID string $(count(waters)+v_zBias)" &
    "variable negative string -1" &
    "variable label string ${label}.z.c${zBias}" &
elif "${zBias} == am" &
    "next zBias" &
    "variable zBiasID string $(count(waters)+count(cations)+v_zBias)" &
    "variable negative string -1" &
    "variable label string ${label}.z.a${zBias}" &
else &
    "print 'ERROR: first zBias specifier must be c/s/id[m].'" &
    "quit 1"

# Assign Equilibrium position & spring constant
next zBias
variable z0 string $(v_zBias*v_negative)
variable zTarget${zBiasCounter} equal ${z0}
next zBias
variable k string ${zBias}

# Compute Expected Deviation
variable zStDev${zBiasCounter} equal sqrt(v_kT/${k})

print "zBias:"
print "ID: ${zBiasID}"
print "z0: ${z0}"
print "k: $k"
# Create Fix & Add to Thermodynamic Output
group zGroup${zBiasCounter} id ${zBiasID}
group zGroup${zBiasCounter} include molecule
group biased union biased zGroup${zBiasCounter}
fix zBias${zBiasCounter} zGroup${zBiasCounter} spring tether $k NULL NULL ${z0} 0
compute z${zBiasCounter} zGroup${zBiasCounter} com
variable zDev${zBiasCounter} equal (c_z${zBiasCounter}[3]-v_zTarget${zBiasCounter})/v_zStDev${zBiasCounter}
variable thermo_spec string "${thermo_spec} v_zTarget${zBiasCounter} c_z${zBiasCounter}[3] f_zBias${zBiasCounter}"

variable label string ${label}.${z0}.k.${k}

# Parse Next zBias
next zBias
jump SELF zLoop
    
label zBreak

# z Biases
# -----------------------------------------------------------------------------

# Check if no zBias specified
if "${rBias} == False" then &
    "jump SELF rBreak"

variable rBiasCounter string 0

# If zBias specified loop through biases
label rLoop

variable rBiasCounter string $(v_rBiasCounter+1)

variable negative string 1

# Check if ion type is specified & assign ID
if "${rBias} == id" then &
    "next rBias" &
    "variable rBiasID1 string ${rBias}" &
    "variable label string ${label}.r.id${rBias}" &
    "next rBias" &
elif "${rBias} == c" &
    "next rBias" &
    "variable rBiasID1 string $(count(waters)+v_rBias)" &
    "variable label string ${label}.r.c${rBias}" &
    "next rBias" &
elif "${rBias} == a" &
    "next rBias" &
    "variable rBiasID1 string $(count(waters)+count(cations)+v_rBias)" &
    "variable label string ${label}.r.a${rBias}" &
    "next rBias" &
else &
    "print 'ERROR: first rBias specifier must be c/s/id.'" &
    "quit 1"

if "${rBias} == id" then &
    "next rBias" &
    "variable rBiasID2 string ${rBias}" &
    "variable label string ${label}.id${rBias}" &
elif "${rBias} == c" &
    "next rBias" &
    "variable rBiasID2 string $(count(waters)+v_rBias)" &
    "variable label string ${label}.c${rBias}" &
elif "${rBias} == a" &
    "next rBias" &
    "variable rBiasID2 string $(count(waters)+count(cations)+v_rBias)" &
    "variable label string ${label}.a${rBias}" &
else &
    "print 'ERROR: first rBias specifier must be c/s/id.'" &
    "quit 1"

# Assign Equilibrium position & spring constant
next rBias
variable r0 string ${rBias}
variable rTarget${rBiasCounter} equal ${r0}
next rBias
variable k string ${rBias}

# Compute Expected Deviation
variable rStDev${rBiasCounter} equal sqrt(v_kT/${k})

print "rBias:"
print "ID1: ${rBiasID1}"
print "ID2: ${rBiasID2}"
print "r0: ${r0}"
print "k: $k"

# Create Fix & Add to Thermodynamic Output
group rGroup${rBiasCounter}_1 id ${rBiasID1}
group rGroup${rBiasCounter}_1 include molecule
group rGroup${rBiasCounter}_2 id ${rBiasID2}
group rGroup${rBiasCounter}_2 include molecule
group biased union biased rGroup${rBiasCounter}_1 rGroup${rBiasCounter}_2
fix rBias${rBiasCounter} rGroup${rBiasCounter}_1 spring couple rGroup${rBiasCounter}_2 $k 0 0 0 ${r0}
compute r${rBiasCounter}_1 rGroup${rBiasCounter}_1 com
compute r${rBiasCounter}_2 rGroup${rBiasCounter}_2 com
variable r${rBiasCounter} equal sqrt((c_r${rBiasCounter}_1[1]-c_r${rBiasCounter}_2[1])^2+(c_r${rBiasCounter}_1[2]-c_r${rBiasCounter}_2[2])^2+(c_r${rBiasCounter}_1[3]-c_r${rBiasCounter}_2[3])^2)
#variable rDev${rBiasCounter} equal (v_r${rBiasCounter}-v_rTarget${rBiasCounter})/v_rStDev${rBiasCounter}
variable thermo_spec string "${thermo_spec} v_rTarget${rBiasCounter} v_r${rBiasCounter} f_rBias${rBiasCounter}"

variable label string ${label}.${r0}.k.$k

# Parse Next zBias
next rBias
jump SELF rLoop
    
label rBreak

# COM Biases
# -----------------------------------------------------------------------------

if "${comBias} == 0" then &
    "jump SELF comBreak"

#variable cStDev equal sqrt(v_kT/${comBias})

variable comTarget equal 0
group comGroup subtract all biased
fix comBias comGroup spring tether ${comBias} NULL NULL 0 0
compute COM comGroup com

#variable cDev equal (c_COM[3])/v_cStDev

variable thermo_spec string "${thermo_spec} v_comTarget c_COM[3] f_comBias"

label comBreak
