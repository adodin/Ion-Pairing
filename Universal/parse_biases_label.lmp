# =============================================================================
# Add Bias Potentials
# =============================================================================

# z Biases
# -----------------------------------------------------------------------------

# Check if no zBias specified
if "${zBias} == False" then &
    "jump SELF zBreak"

variable zBiasCounter string 0

# If zBias specified loop through biases
label zLoop

variable zBiasCounter string $(v_zBiasCounter+1)

variable negative string 1

# Check if ion type is specified & assign ID
if "${zBias} == id" then &
    "next zBias" &
    "variable label string ${label}.z.id${zBias}" &
elif "${zBias} == c" &
    "next zBias" &
    "variable label string ${label}.z.c${zBias}" &
elif "${zBias} == a" &
    "next zBias" &
    "variable label string ${label}.z.a${zBias}" &
elif "${zBias} == idm" &
    "next zBias" &
    "variable negative string -1" &
    "variable label string ${label}.z.id${zBias}" &
elif "${zBias} == cm" &
    "next zBias" &
    "variable negative string -1" &
    "variable label string ${label}.z.c${zBias}" &
elif "${zBias} == am" &
    "next zBias" &
    "variable negative string -1" &
    "variable label string ${label}.z.a${zBias}" &
else &
    "print 'ERROR: first zBias specifier must be c/s/id[m].'" &
    "quit 1"

# Assign Equilibrium position & spring constant
next zBias
variable z0 string $(v_zBias*v_negative)
variable zTarget${zBiasCounter} equal ${z0}
next zBias
variable k string ${zBias}

variable label string ${label}.${z0}.k.${k}

# Parse Next zBias
next zBias
jump SELF zLoop
    
label zBreak

# z Biases
# -----------------------------------------------------------------------------

# Check if no zBias specified
if "${rBias} == False" then &
    "jump SELF rBreak"

variable rBiasCounter string 0

# If zBias specified loop through biases
label rLoop

variable rBiasCounter string $(v_rBiasCounter+1)

variable negative string 1

# Check if ion type is specified & assign ID
if "${rBias} == id" then &
    "next rBias" &
    "variable label string ${label}.r.id${rBias}" &
    "next rBias" &
elif "${rBias} == c" &
    "next rBias" &
    "variable label string ${label}.r.c${rBias}" &
    "next rBias" &
elif "${rBias} == a" &
    "next rBias" &
    "variable label string ${label}.r.a${rBias}" &
    "next rBias" &
else &
    "print 'ERROR: first rBias specifier must be c/s/id.'" &
    "quit 1"

if "${rBias} == id" then &
    "next rBias" &
    "variable label string ${label}.id${rBias}" &
elif "${rBias} == c" &
    "next rBias" &
    "variable label string ${label}.c${rBias}" &
elif "${rBias} == a" &
    "next rBias" &
    "variable label string ${label}.a${rBias}" &
else &
    "print 'ERROR: first rBias specifier must be c/s/id.'" &
    "quit 1"

# Assign Equilibrium position & spring constant
next rBias
variable r0 string ${rBias}
variable rTarget${rBiasCounter} equal ${r0}
next rBias
variable k string ${rBias}

# Compute Expected Deviation
variable rStDev${rBiasCounter} equal sqrt(v_kT/${k})

variable label string ${label}.${r0}.k.$k

# Parse Next zBias
next rBias
jump SELF rLoop
    
label rBreak

label comBreak
