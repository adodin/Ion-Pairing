# =============================================================================
# =============================================================================
#
# NPT Equilibration of Liquid Box of Water Solution
# Written By: Amro Dodin
#
# =============================================================================
# =============================================================================

# =============================================================================
# Read in Configuration & Parameters
# =============================================================================

# Initialize Parameters
include parameters.lmp
include parse_model.lmp

# Read in Data From init Script
atom_style full
pair_style soft 3.0
bond_style harmonic 
angle_style harmonic
improper_style harmonic

if "${pol} == Drude" then &
    "variable label string ${pol}.${label}" &
    "variable FFLabel string ${pol}.${FFLabel}" 

if "${sym}==asym" then &
    "variable  label string asym.${label}" &
    "variable FFLabel string asym.${FFLabel}" 

if "${skipEquil}==False" then &
    "read_data ${DATADIR}data.${label}.init" &
else &
    "read_data ${DATADIR}data.${label}.eq nocoeff" &
    "bond_coeff * 0 0" &
    "angle_coeff * 0 0" &
    "improper_coeff * 0 0" 

if "${BC} == electrode" then &
    "variable label string ${label}.pot.${pot}"

if "${pol} == ECC" then &
    "variable label string ${pol}.${label}" &
    "variable FFLabel string ${pol}.${FFLabel}"

log ${DATADIR}eq.${label}.log

# Read in Force Field
include ${FFDIR}ff.${FFLabel}.lmp
#delete_bonds all multi 
neighbor 2.0 bin
neigh_modify delay 0

# =============================================================================
# Set Up Groups
# =============================================================================

group waters type 1:${numWaterTypes}
group cations type $((v_numWaterTypes+1)):$((v_numWaterTypes+v_numCationTypes))
group anions type $((v_numWaterTypes+v_numCationTypes+1)):$((v_numWaterTypes+v_numCationTypes+v_numAnionTypes))
if "${BC} == electrode" then &
    "group electrodes type $((v_numWaterTypes+v_numCationTypes+v_numAnionTypes+1)):$((v_numWaterTypes+v_numCationTypes+v_numAnionTypes+v_numBCTypes))" &
    "region rbot block EDGE EDGE EDGE EDGE EDGE 0" &
    "region rtop block EDGE EDGE EDGE EDGE 0 EDGE" &
    "group allbot region rbot" &
    "group alltop region rtop" &
    "group bot intersect electrodes allbot" &
    "group top intersect electrodes alltop" &
else &
    "group electrodes empty"
group mobile subtract all electrodes

reset_mol_ids mobile single yes

if "${pol} == Drude" then &
    "jump SELF skipCharges"

if "${cationMolecular}==False" then &
    "set type ${cationType} charge ${qCation}"

if "${anionMolecular}==False" then &
    "set type ${anionType} charge ${qAnion}"


label skipCharges

if "${cationMolecular}==True && ${anionMolecular}==True" then &
    "group molecular union waters cations anions" &
    "group simple empty" &
elif "${cationMolecular}==True && ${anionMolecular}==False" &
    "group molecular union waters cations" &
    "group simple union anions" &
elif "${cationMolecular}==False && ${anionMolecular}==True" &
    "group molecular union waters anions" &
    "group simple union cations" &
else &
    "group molecular union waters" &
    "group simple union cations anions" 

if "${pol} == Drude" then &
    "group ATOMS type 1:${atomTypes}" &
    "group DRUDE type ${DrudeTypesLower}:${DrudeTypesUpper}"

# =============================================================================
# Set Up ECC scaling
# =============================================================================

if "${pol} == ECC" then &
    "variable charge atom v_ECC*q" &
    "set type ${anionType} charge v_charge" & 
    "set type ${cationType} charge v_charge" 

# =============================================================================
# Set Up Overall Integration Fixes
# =============================================================================

timestep ${dtStabilize}

if "${BC} == wall" then &
    "change_box all boundary p p f" &
    "kspace_modify slab 3.0" &
    "fix wall all wall/lj126 zlo EDGE 0.1 ${ljRAu} 12.0 zhi EDGE 0.1 ${ljRAu} 12.0 units box" &
elif "${BC} == electrode" &
    "change_box all boundary p p f" &
    "kspace_modify slab 3.0" &
    "fix conp bot electrode/conp -$((v_pot/2)) ${eta} couple top $((v_pot/2)) symm on"

variable thermo_spec string "step v_TTarget temp pe density ke fmax"

include parse_biases.lmp

# =============================================================================
# Set Up Outputs
# =============================================================================

variable TTarget equal 1

group OH type 1 2
compute oh_bonds OH bond/local dist
compute oh_max OH reduce max c_oh_bonds

variable thermo_spec string "${thermo_spec} c_oh_max"

thermo_style custom ${thermo_spec}
compute myTemp mobile temp
thermo_modify temp myTemp
thermo ${thermoEvery}

dump 1 all custom ${atomEvery} ${DATADIR}eq.${label}.lammpstrj id mol type q x y z vx vy vz ix iy iz
#dump 1 all custom 1 ${DATADIR}eq.${label}.lammpstrj id mol type q x y z vx vy vz fx fy fz ix iy iz
if "$((count(biased))) > 0" then &
    "dump 2 biased custom ${cvEvery} ${DATADIR}bias.eq.${label}.lammpstrj id mol type x y z"

if "${skipEquil}==True" then &
    "jump SELF production"

if "${pol} == Drude" then &
    "delete_bonds ATOMS multi" &
else &
    "delete_bonds all multi "
   
print "==============================================================="
print "==============================================================="
print "==============================================================="
print "Running Stabilization"
print "==============================================================="
print "==============================================================="
print "==============================================================="

if "${pol} == Drude" then &
    "fix DrudeDirect all drude/transform/direct"
fix rigidNVT molecular rigid/nvt molecule temp 1 1 ${gtTStabilize} tparam 10 10 3
fix simpleNVT simple nvt temp 1 1 ${gtTStabilize} tloop 10 tchain 10
if "${pol} == Drude" then &
    "fix DrudeNVT DRUDE nvt temp 1 ${TD} ${gtTDStabilize}" &
    "fix DrudeInverse all drude/transform/inverse"

variable f equal fmax

fix halter all halt ${nStabilizeBatch} v_f < ${FMaxPartStabilized} error continue
run ${nStabilizeMax} pre no post no 

unfix halter

fix halter all halt ${nStabilizeBatch} v_f < ${FMaxStabilized} error continue
timestep ${dtStabilize2}
run ${nStabilizeMax} upto pre yes post no 

unfix halter

velocity all set 0 0 0

variable TTarget equal ramp(1,$T)

# =============================================================================
# Run Heating
# =============================================================================

if "${pol} == Drude" then &
    "fix DrudeDirect all drude/transform/direct"
fix rigidNVT molecular rigid/nvt molecule temp 1 $T ${gtTEquil} tparam 10 10 3
fix simpleNVT simple nvt temp 1 $T ${gtT} tloop 10 tchain 10
if "${pol} == Drude" then &
    "fix DrudeNVT DRUDE nvt temp 1 ${TD} ${gtTDEquil}" &
    "fix DrudeInverse all drude/transform/inverse"

print "==============================================================="
print "==============================================================="
print "==============================================================="
print "Running Heating"
print "==============================================================="
print "==============================================================="
print "==============================================================="

timestep ${dtEquil}
run ${nHeat} pre yes post no


# =============================================================================
# Run Equilibration
# =============================================================================

if "${pol} == Drude" then &
    "unfix DrudeDirect" &
    "unfix DrudeNVT" &
    "unfix DrudeInverse"
unfix rigidNVT
unfix simpleNVT
variable TTarget equal $T

timestep ${dt}

if "${pol} == Drude" then &
    "fix DrudeDirect all drude/transform/direct"
fix rigidNVT molecular rigid/nvt molecule temp $T $T ${gtTEquil} tparam 10 10 3
fix simpleNVT simple nvt temp $T $T ${gtT} tloop 10 tchain 10
if "${pol} == Drude" then &
    "fix DrudeNVT DRUDE nvt temp ${TD} ${TD} ${gtTDEquil}" &
    "fix DrudeInverse all drude/transform/inverse"

compute cz all chunk/atom bin/1d z center 0.5

print "==============================================================="
print "==============================================================="
print "==============================================================="
print "Running Equilibration"
print "==============================================================="
print "==============================================================="
print "==============================================================="

run ${nEquil} pre no post yes

write_data ${DATADIR}data.${label}.eq pair ij

# =============================================================================
# Run Production
# =============================================================================

if "${pol} == Drude" then &
    "unfix DrudeDirect" &
    "unfix DrudeNVT" &
    "unfix DrudeInverse"
unfix rigidNVT
unfix simpleNVT

label production

undump 1

if "$((count(biased))) > 0" then &
    "undump 2"

if "${skipProd}==True" then &
    quit

reset_timestep 0


log ${DATADIR}eq.${label}.log

if "${skipEquil}==True" then &
    "read_dump ${DATADIR}eq.${label}.lammpstrj ${nEquil} x y z vx vy vz q ix iy iz" &
    "reset_timestep 0"

variable TTarget equal $T

if "${pol} == Drude" then &
    "fix DrudeDirect all drude/transform/direct"
fix rigidNVT molecular rigid/nvt molecule temp $T $T ${gtT} tparam 10 10 3
fix simpleNVT simple nvt temp $T $T ${gtT} tloop 10 tchain 10
if "${pol} == Drude" then &
    "fix DrudeNVT DRUDE nvt temp ${TD} ${TD} ${gtTD}" &
    "fix DrudeInverse all drude/transform/inverse"

dump 1 all custom ${atomEvery} ${DATADIR}prod.${label}.lammpstrj id mol type q x y z vx vy vz ix iy iz
if "$((count(biased))) > 0" then &
    "dump 2 biased custom ${cvEvery} ${DATADIR}bias.prod.${label}.lammpstrj id mol type x y z"

print "==============================================================="
print "==============================================================="
print "==============================================================="
print "Running Production"
print "==============================================================="
print "==============================================================="
print "==============================================================="

run ${nProd} pre no post yes

write_data ${DATADIR}data.${label}.prod pair ij